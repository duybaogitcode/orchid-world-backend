# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type SuccessResponse {
  success: Boolean!
}

type Categories {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  slug: String!
  product: [Product!]!
  paginateProduct(page: Int! = 1, limit: Int! = 10): PaginatedProducts
}

"""ObjectId is a mongodb ObjectId. String of 12 or 24 hex chars"""
scalar ObjectId

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Tags {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  slug: String!
  values: [String!]!
}

type TagWithValues {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  tag_slug: String!
  values: String!
  product_id: ObjectId!
  tags: Tags!
  product: Product!
}

type Permission {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  pattern: String!
}

type PaginatedPermissions {
  docs: [Permission!]!
  totalDocs: Int!
  page: Int!
  limit: Int!
  totalPages: Int!
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
  pagingCounter: Int!
}

type Role {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  permissionIds: [ObjectId!]
  permissions: [Permission!]!
}

type PaginatedRoles {
  docs: [Role!]!
  totalDocs: Int!
  page: Int!
  limit: Int!
  totalPages: Int!
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
  pagingCounter: Int!
}

type Session {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: ObjectId!
  private_key: ObjectId!
  public_key: ObjectId!
}

type User {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  roleId: ObjectId!
  role: Role!
}

type ProductType {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  slug: String!
}

type Product {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  authorId: ObjectId!
  name: String!
  slug: String!
  shortDescription: String
  longDescription: String
  media: [String!]
  status: ProductStatus
  category_id: ObjectId!
  author: User!
  category: Categories!
}

enum ProductStatus {
  PENDING
  APPROVED
  NOT_AVAILABLE
  DISAPPROVED
}

type PaginatedProducts {
  docs: [Product!]!
  totalDocs: Int!
  page: Int!
  limit: Int!
  totalPages: Int!
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
  pagingCounter: Int!
}

type Media {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  authorId: ObjectId!
  name: String!
  url: String!
  author: User!
}

type PaginatedMedia {
  docs: [Media!]!
  totalDocs: Int!
  page: Int!
  limit: Int!
  totalPages: Int!
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
  pagingCounter: Int!
}

type Auction {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  productId: ObjectId!
  expireAt: DateTime!
  startAt: DateTime!
  status: Status!
  product: Product!
}

enum Status {
  PENDING
  APPROVED
  NOT_AVAILABLE
  DISAPPROVED
}

type PaginatedAuctions {
  docs: [Auction!]!
  totalDocs: Int!
  page: Int!
  limit: Int!
  totalPages: Int!
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
  pagingCounter: Int!
}

type AuctionBiddingHistory {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  auctionId: ObjectId!
  bidPrice: Float!
  auction: Auction!
}

type PaginatedAuctionBiddingHistories {
  docs: [AuctionBiddingHistory!]!
  totalDocs: Int!
  page: Int!
  limit: Int!
  totalPages: Int!
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
  pagingCounter: Int!
}

type Query {
  whoAmI: User!
  product(id: ObjectId!): Product!
  allProducts: [Product!]!
  paginateProducts(page: Int! = 1, limit: Int! = 10): PaginatedProducts!
  tags(id: ObjectId!): Tags!
  allTags: [Tags!]!
  tagwithvalues(id: ObjectId!): TagWithValues!
  allTagWithValues: [TagWithValues!]!
  categories(id: ObjectId!): Categories!
  allCategories: [Categories!]!
  user(id: ObjectId!): User!
  allUsers: [User!]!
  role(id: ObjectId!): Role!
  paginateRoles(page: Int! = 1, limit: Int! = 10): PaginatedRoles!
  permission(id: ObjectId!): Permission!
  paginatePermissions(page: Int! = 1, limit: Int! = 10): PaginatedPermissions!
  media(id: ObjectId!): Media!
  paginateMedia(page: Int! = 1, limit: Int! = 10): PaginatedMedia!
  auction(id: ObjectId!): Auction!
  paginateAuctions(page: Int! = 1, limit: Int! = 10): PaginatedAuctions!
  auctionbiddinghistory(id: ObjectId!): AuctionBiddingHistory!
  paginateAuctionBiddingHistories(page: Int! = 1, limit: Int! = 10): PaginatedAuctionBiddingHistories!
}

type Mutation {
  signIn(input: String!): String!
  createTags(input: CreateTagsInput!): Tags!
  updateTags(input: UpdateTagsInput!): Tags!
  removeTags(id: ObjectId!, options: RemoveOptions): SuccessResponse!
  createCategories(input: CreateCategoriesInput!): Categories!
  updateCategories(input: UpdateCategoriesInput!): Categories!
  removeCategories(id: ObjectId!, options: RemoveOptions): SuccessResponse!
  updateUser(input: UpdateUserInput!): User!
  createRole(input: CreateRoleInput!): Role!
  updateRole(input: UpdateRoleInput!): Role!
  removeRole(id: ObjectId!, options: RemoveOptions): SuccessResponse!
  createPermission(input: CreatePermissionInput!): Permission!
  updatePermission(input: UpdatePermissionInput!): Permission!
  removePermission(id: ObjectId!, options: RemoveOptions): SuccessResponse!
  createMedia(input: CreateMediaInput!): Media!
  updateMedia(input: UpdateMediaInput!): Media!
  removeMedia(id: ObjectId!, options: RemoveOptions): SuccessResponse!
  createAuction(input: CreateAuctionInput!): Auction!
  updateAuction(input: UpdateAuctionInput!): Auction!
  removeAuction(id: ObjectId!, options: RemoveOptions): SuccessResponse!
  createAuctionBiddingHistory(input: CreateAuctionBiddingHistoryInput!): AuctionBiddingHistory!
  updateAuctionBiddingHistory(input: UpdateAuctionBiddingHistoryInput!): AuctionBiddingHistory!
  removeAuctionBiddingHistory(id: ObjectId!, options: RemoveOptions): SuccessResponse!
}

input CreateTagsInput {
  name: String!
  slug: String!
  values: [String!]!
}

input UpdateTagsInput {
  id: ObjectId
  name: String
  slug: String
  values: [String!]
}

input RemoveOptions {
  mode: RemoveMode! = RequiredCleanRelations
}

enum RemoveMode {
  RequiredCleanRelations
  IgnoreRelations
  CleanUpRelationsAfterRemoved
}

input CreateCategoriesInput {
  name: String!
  slug: String!
}

input UpdateCategoriesInput {
  id: ObjectId
  name: String
  slug: String
}

input UpdateUserInput {
  id: ObjectId
  roleId: ObjectId
}

input CreateRoleInput {
  name: String!
  permissionIds: [ObjectId!]
  permissions: [CreatePermissionInput!]
}

input CreatePermissionInput {
  pattern: String!
}

input UpdateRoleInput {
  id: ObjectId
  name: String
  permissionIds: [ObjectId!]
}

input UpdatePermissionInput {
  id: ObjectId
  pattern: String
}

input CreateMediaInput {
  name: String!
  url: String!
}

input UpdateMediaInput {
  id: ObjectId
  name: String
  url: String
}

input CreateAuctionInput {
  productId: ObjectId!
  expireAt: DateTime!
  startAt: DateTime!
  status: String!
}

input UpdateAuctionInput {
  id: ObjectId
  productId: ObjectId
  expireAt: DateTime
  startAt: DateTime
  status: String
}

input CreateAuctionBiddingHistoryInput {
  auctionId: ObjectId!
  bidPrice: Float!
}

input UpdateAuctionBiddingHistoryInput {
  id: ObjectId
  auctionId: ObjectId
  bidPrice: Float
}