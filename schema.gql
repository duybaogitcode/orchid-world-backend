# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type SuccessResponse {
  success: Boolean!
}

type Permission {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  slug: String!
  paginateProduct(page: Int! = 1, limit: Int! = 10, filter: ProductFilter, sort: ProductSort): PaginatedProducts
  pattern: String!
}

"""ObjectId is a mongodb ObjectId. String of 12 or 24 hex chars"""
scalar ObjectId

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input ProductFilter {
  name: ProductNameFilter
  search: String
}

input ProductNameFilter {
  contains: String
}

input ProductSort {
  price: SortDirection
}

enum SortDirection {
  ASC
  DESC
type Role {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  permissionIds: [ObjectId!]
  permissions: [Permission!]!
}

type Session {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: ObjectId!
  refreshToken: String!
  accessToken: String!
}

type User {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  googleId: String!
  firstName: String!
  lastName: String!
  address: [String!]
  email: String!
  phone: String
  isPhoneVerified: Boolean!
  avatar: String
  roleId: ObjectId!
  role: Role!
}

type BulkRemoveUsersResult {
  id: ObjectId!
  result: User
  success: Boolean!
  errorMessage: String
}

type Tags {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  slug: String!
  values: [String!]!
}

type TagWithValues {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  tag_id: ObjectId!
  values: String!
  tag: Tags!
}

type Product {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  media: [String!]
  slug: String!
  price: Float!
  quantity: Float!
  description: String
  status: ProductStatus
  tags: [TagWithValues!]!
  author: User!
  category: Categories!
}

enum ProductStatus {
  PENDING
  APPROVED
  NOT_AVAILABLE
  DISAPPROVED
  REMOVED
}

type PaginatedProducts {
  docs: [Product!]!
  totalDocs: Int!
  page: Int!
  limit: Int!
  totalPages: Int!
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
  pagingCounter: Int!
}

type CartItem {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  productId: ObjectId!
  quantity: Float!
  totalPrice: Float!
  isAvailableProduct: Boolean!
  cartShopItemId: ObjectId!
  product: Product!
}

type CartShopItem {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  cartId: ObjectId!
  totalQuantity: Float!
  totalPrice: Float!
  cartItem: [CartItem!]!
}

type Cart {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  totalQuantity: Float!
  totalPrice: Float!
  CartShopItem: [CartShopItem!]!
  author: User!
}

type PaginatedCarts {
  docs: [Cart!]!
  totalDocs: Int!
  page: Int!
  limit: Int!
  totalPages: Int!
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
  pagingCounter: Int!
}
type Categories {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  slug: String!
  paginateProduct(page: Int! = 1, limit: Int! = 10): PaginatedProducts
}

type Query {
  product(id: ObjectId!): Product!
  allProducts(filter: ProductFilter, sort: ProductSort): [Product!]!
  paginateProducts(page: Int! = 1, limit: Int! = 10, filter: ProductFilter, sort: ProductSort): PaginatedProducts!
  tags(id: ObjectId!): Tags!
  allTags: [Tags!]!
  categories(id: ObjectId!): Categories!
  allCategories: [Categories!]!
  user(id: ObjectId!): User!
  allUsers: [User!]!
  allCarts: [Cart!]!
  paginateCarts(page: Int! = 1, limit: Int! = 10): PaginatedCarts!
  role(id: ObjectId!): Role!
  allRoles: [Role!]!
  permission(id: ObjectId!): Permission!
  allPermissions: [Permission!]!
  session(id: ObjectId!): Session!
  allSessions: [Session!]!
  userByGoogleId(input: GetByUidInput!): User!
}

input GetByUidInput {
  googleId: String!
}

type Mutation {
  createTags(input: CreateTagsInput!): Tags!
  updateTags(input: UpdateTagsInput!): Tags!
  removeTags(id: ObjectId!, options: RemoveOptions): SuccessResponse!
  createCategories(input: CreateCategoriesInput!): Categories!
  updateCategories(input: UpdateCategoriesInput!): Categories!
  removeCategories(id: ObjectId!, options: RemoveOptions): SuccessResponse!
  bulkRemoveUsers(ids: [ObjectId!]!, options: RemoveOptions): [BulkRemoveUsersResult!]!
  updateUser(input: UpdateUserInput!): User!
  removeCartItem(id: ObjectId!, options: RemoveOptions): SuccessResponse!
  createProduct(input: CreateProductInput!): Product!
  updateProduct(input: UpdateProductInput!): Product!
  removeProduct(id: String!): Boolean!
  createRole(input: CreateRoleInput!): Role!
  updateRole(input: UpdateRoleInput!): Role!
  removeRole(id: ObjectId!, options: RemoveOptions): SuccessResponse!
  createPermission(input: CreatePermissionInput!): Permission!
  updatePermission(input: UpdatePermissionInput!): Permission!
  removePermission(id: ObjectId!, options: RemoveOptions): SuccessResponse!
  createSession(input: CreateSessionInput!): Session!
  updateSession(input: UpdateSessionInput!): Session!
  removeSession(id: ObjectId!, options: RemoveOptions): SuccessResponse!
  createProduct(input: CreateProductInput!): Product!
  login(loginInput: LoginInput!): Session!
}

input CreateTagsInput {
  name: String!
  slug: String!
  values: [String!]!
}

input UpdateTagsInput {
  id: ObjectId!
  name: String
  slug: String
  values: [String!]
}

input RemoveOptions {
  mode: RemoveMode! = RequiredCleanRelations
}

enum RemoveMode {
  RequiredCleanRelations
  IgnoreRelations
  CleanUpRelationsAfterRemoved
}

input CreateCategoriesInput {
  name: String!
  slug: String!
}

input UpdateCategoriesInput {
  id: ObjectId!
  name: String
  slug: String
}

input UpdateUserInput {
  id: ObjectId!
  google_id: String
  firstName: String
  lastName: String
  address: [String!]
  email: String
  phone: String
  isPhoneVerified: Boolean = false
  avatar: String
  roleId: ObjectId
}

input CreateRoleInput {
  name: String!
  permissionIds: [ObjectId!]
  permissions: [CreatePermissionInput!]
}

input CreatePermissionInput {
  pattern: String!
}

input UpdateRoleInput {
  id: ObjectId
  name: String
  permissionIds: [ObjectId!]
}

input UpdatePermissionInput {
  id: ObjectId
  pattern: String
}

input CreateSessionInput {
  userId: ObjectId!
  refreshToken: String!
  accessToken: String!
}

input UpdateSessionInput {
  id: ObjectId
  userId: ObjectId
  refreshToken: String
  accessToken: String
}

input CreateProductInput {
  name: String!
  file: [Upload!]!
  price: Float!
  quantity: Float!
  description: String
  tags: [CreateTagWithValuesWithinProductInput!]
  category_id: ObjectId!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateTagWithValuesWithinProductInput {
  tag_id: ObjectId!
  values: String!
}

input UpdateProductInput {
  id: ObjectId!
  name: String
  price: Float
  quantity: Float
  description: String
  status: ProductStatus = PENDING
  category_id: ObjectId
  deleteUrl: [String!]
  fileUpdate: [Upload!]
  tagsUpdate: [InputTags!]
}

input InputTags {
  tag_id: ObjectId!
  values: String!
input LoginInput {
  """Firebase Id Token"""
  idToken: String!
}