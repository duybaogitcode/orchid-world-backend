# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type SuccessResponse {
  success: Boolean!
}

type Categories {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  slug: String!
  product: [Product!]!
  paginateProduct(page: Int! = 1, limit: Int! = 10): PaginatedProducts
}

"""ObjectId is a mongodb ObjectId. String of 12 or 24 hex chars"""
scalar ObjectId

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Tags {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  slug: String!
  values: [String!]!
}

type TagWithValues {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  tag_slug: String!
  values: String!
  product_id: ObjectId!
  tags: Tags!
  product: Product!
}

type Permission {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  pattern: String!
}

type Role {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  permissionIds: [ObjectId!]
  permissions: [Permission!]!
}

type Session {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: ObjectId!
  private_key: ObjectId!
  public_key: ObjectId!
}

type User {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  roleId: ObjectId!
  role: Role!
}

type Product {
  id: ObjectId!
  createdAt: DateTime!
  updatedAt: DateTime!
  authorId: ObjectId!
  name: String!
  media: [String!]
  slug: String!
  shortDescription: String
  longDescription: String
  status: ProductStatus
  category_id: ObjectId!
  tags: [TagWithValues!]!
  author: User!
  category: Categories!
}

enum ProductStatus {
  PENDING
  APPROVED
  NOT_AVAILABLE
  DISAPPROVED
}

type PaginatedProducts {
  docs: [Product!]!
  totalDocs: Int!
  page: Int!
  limit: Int!
  totalPages: Int!
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
  pagingCounter: Int!
}

type Query {
  whoAmI: User!
  product(id: ObjectId!): Product!
  allProducts: [Product!]!
  paginateProducts(page: Int! = 1, limit: Int! = 10): PaginatedProducts!
  tags(id: ObjectId!): Tags!
  allTags: [Tags!]!
  categories(id: ObjectId!): Categories!
  allCategories: [Categories!]!
  user(id: ObjectId!): User!
  allUsers: [User!]!
}

type Mutation {
  signIn(input: String!): String!
  createTags(input: CreateTagsInput!): Tags!
  updateTags(input: UpdateTagsInput!): Tags!
  removeTags(id: ObjectId!, options: RemoveOptions): SuccessResponse!
  createCategories(input: CreateCategoriesInput!): Categories!
  updateCategories(input: UpdateCategoriesInput!): Categories!
  removeCategories(id: ObjectId!, options: RemoveOptions): SuccessResponse!
  updateUser(input: UpdateUserInput!): User!
  createProductTest(input: CreateProductInput!): String!
}

input CreateTagsInput {
  name: String!
  slug: String!
  values: [String!]!
}

input UpdateTagsInput {
  id: ObjectId
  name: String
  slug: String
  values: [String!]
}

input RemoveOptions {
  mode: RemoveMode! = RequiredCleanRelations
}

enum RemoveMode {
  RequiredCleanRelations
  IgnoreRelations
  CleanUpRelationsAfterRemoved
}

input CreateCategoriesInput {
  name: String!
  slug: String!
}

input UpdateCategoriesInput {
  id: ObjectId
  name: String
  slug: String
}

input UpdateUserInput {
  id: ObjectId
  roleId: ObjectId
}

input CreateProductInput {
  name: String!
  media: [String!]
  file: [Upload!]!
  slug: String!
  shortDescription: String
  longDescription: String
  status: ProductStatus = PENDING
  tags: [CreateTagWithValuesWithinProductInput!]
  category_id: ObjectId!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateTagWithValuesWithinProductInput {
  name: String!
  tag_slug: String!
  values: String!
}